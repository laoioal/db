/*
    오라클의 데이터 타입
    
        숫자
            NUMBER, NUMBER(숫자) --> 숫자는 사용 자릿수
            NUMBER(유효자릿수, 소수이하자릿수)
        문자
            CHAR
            ==> 고정 문자수 문자열 데이터 타입
                
                형식 ]
                    CHAR(숫자) --> 바이트 수만큼의 문자 기억
                    CHAR(숫자 CHAR) --> 숫자 개수만큼의 문자 기억
                    
            VARCHAR2
            ==> 가변 문자수 문자열 데이터 타입
                VARCHAR2(숫자) --> 숫자수만큼의 바이트 만큼 문자 기억
                VARCHAR2(숫자 CHAR) --> 숫자 개수만큼의 문자를 기억할 수 있다.
                
            예] 
            
                CHAR(10)
                ==> 'A' ==> 이 문자를 기억할때 10바이트를 모두 사용한다.
                VARCHAR2(10)
                ==> 'A' ==> 1바이트로 문자를 기억
                
                
            조건 ]
                비교연산자
                =       : 같다
                >       : 크다
                <       
                <=      
                >=      
                !=      : 다르다
                <>      : 다르다
                
--------------------------------------------------------------------------------                
                
 1. BETWEEN ~ AND
    ==> 데이터가 특정 범위 안에 있는지를 확인하는 연산자
    
        형식 ]
            컬럼이름    BETWEEN 데이터1    AND     데이터2
            ==>
            컬럼의 내용이 데이터1과 데이터2 사이에 있는지를 검사한다.
            주의 ]
                값이 작은 데이터가 데이터1에 와야 한다.
                
                부정을 할 경우는 BETWEEN 앞에 NOT을 붙여준다.
SELECT
    ename, sal
FROM
    emp
WHERE
    sal BETWEEN 1000 and 3000
;
--------------------------------------------------------------------------------                
    2. IN
    ==> 데이터가 주어진 데이터들 중 하나인지를 검사하는 연산자
        
        형식 ]
            필드      IN (데이터1, 데이터2, ...)
            필드      NOT IN (데이터1, 데이터2, ...)

SELECT
    ename, job, deptno
FROM
    emp
WHERE
    deptno IN (10, 30)
;
--------------------------------------------------------------------------------            
    3. LIKE (문자열 비교 연산자)
    ==> 문자열을 처리하는 경우에만 사용하는 방법으로
        문자열의 일부분을 와일드 카드 처리하여
        조건식을 제시하는 방법
        
        형식 ]
            필드     LIKE '와일드카드'
        의미 ]
            데이터가 지정한 문자열 형식과 동일한지를 판단
          
        참고 ]
            와일드카드 사용법
            
                _   : 한개당 한글자만을 와일드카드로 지정하는 것
                %   : 글자수에 관계없이 모든 문자를 포함하는 와일드 카드
                문자를 쓰게되면 그 위치에 문자가 와야한다.
                
                    예 ]
                        'M%'    -   'M'으로 시작하는 모든 문자열
                        'M__'   -   'M'으로 시작하는 세문자로 이루어진 문자열
                        '%M%'   -   'M'이 포함된 모든문자
                        '%M'    -   'M'으로 끝나는 문자열

SELECT
    ename AS "사원 이름", job "직 급"
FROM
    emp
WHERE
   ename LIKE '_____'
;
--------------------------------------------------------------------------------
                        
    조회되는 컬럼에 별칭을 부여해서 조회할 수 있다.
    
    형식 ]
        
        컬럼이름        별칭
        
        컬럼이름        AS      별칭
        
        컬럼이름        "별  칭"
        
        컬럼이름        AS     "별  칭"
        
        참고 ]
            공백이 포함된 별칭의 경우는 큰따옴표로 감싸준다.
            
--------------------------------------------------------------------------------            
    데이터 결합 연산자
        ==> 오라클 역시 문자열을 결합하여 출력할 수 있다.
        이때는 두개의 필드를 결합할 수도 있고
        데이터를 결합할 수도 있다.
        
        형식 ]
            
            데이터1 || 데이터2
            
SELECT
    'Mr.'|| ename 사원이름, sal|| '달러' 급여, hiredate 입사일
FROM
    emp
;
--------------------------------------------------------------------------------
    조회된 데이터중 중복된 데이터를 한번만 조회되도록 하는 방법
    ==> 같은 데이터는 한번만 출력되도록 하는 방법
    
    주의사항 ]
        이 명령은 질의명령에서 한번만 사용해야 하고
        조회된 데이터의 각 행들이 같은 경우에만 적용된다.
        ==> 각 필드의 데이터들 마저 동일해야 중복된 데이터로 간주한다.
    
        형식 ]
            SELECT
                DISTINCT 컬럼이름
            FROM
                테이블이름
            ;


-- 사원들의 직급을 조회하세요. 단, 중복된 직급은 한번만 출력되도록 하세요
SELECT
    DISTINCT job
FROM
    emp
;
==> 주의사항 예
SELECT
    DISTINCT job, ename
FROM
    emp
;
--------------------------------------------------------------------------------
시스템의 현재 시간을 반환해주는 연산자
    sysdate
--------------------------------------------------------------------------------
    NULL 데이터
    ==> 필드 안에는 데이터가 보관되어야 하는데
        없는 정보는 데이터가 없을 수 있다.
        이처럼 필듸의 데이터가 없는 상태를 NULL 데이터라 한다.
    
    ***    
    주의 ]
        NULL 데이터는 모든 연산에서 제외된다.
        ==> NULL 데이터로 연산하는 데이터는 결과에 조회에서 제외가 된다.
        
SELECT
    ename, sal, comm
FROM
    emp
WHERE
    comm = null
;

SELECT
    ename, sal, comm
FROM
    emp
WHERE
    comm IS NULL
;

-- 커미션이 있는 사원들의 사원번호, 사원이름, 급여, 커미션을 조회하세요. 단, 커미션은 100을 추가해서 조회하세요
SELECT
    empno, ename, sal, comm ori_comm, comm + 100
FROM
    emp
WHERE
    comm IS NOT NUll
--------------------------------------------------------------------------------        
    ***
    참고 ]
        NVL 함수 
            형식 ]
                NVL(필드이름(또는 필드 계산식), 대신할데이터)
                
            의미 ]
                NULL 데이터를 강제로 특정 데이터로 바꾸어주는 명령
                따라서 특정데이터로 변경을 하게되면 연산에 포함될 수 있다.

SELECT
    ename 사원이름, hiredate 입사일, (sal * 12 + NVL(comm, 0)) 연봉
FROM
    emp
;
--------------------------------------------------------------------------------
    조회된 결과 정렬하기
    ==> 원칙적으로 데이터베이스는 종류에 따라 나름의 기준을 가지고 데이터를 조회한다.
        (반드시 입력 순서대로 조회되는 것은 아니다.)
        오라클은 내부적으로 인덱스를 시용해서 출력순서를 조절하고 있다.
        ==> 출력 순서는 모를 수 있다.
        
    조회된 결과를 원하는 순서대로 정렬하도록 지정해야 한다.
    
    
    ***
    정렬은 윗 절들의 실행 결과를 가지고 정렬을 하게된다.
    
    따라서 ORDER BY 절은 다른 절들의 이후에 기술이 되어야 한다.
    
    참고 ]
        필드를 이용한 연산결과도 정렬에 사용할 수 있다.
        
    
    
    형식 ]
        SELECT
            필드이름, 필드이름, 필드이름, ...
        FROM
            테이블이름
        WHERE
            조건식
        ORDER BY
            필드이름 [ASC || DESC], 필드이름 [ASC || DESC], ....
        ;
        
    참고 ]
        ASC : 오름차순 정렬
        DESC : 내림차순 정렬
        
SELECT
    ename, job, hiredate
FROM
    emp
ORDER BY
    ename DESC
;
--------------------------------------------------------------------------------
    문자열의 길이를 알려주는 함수
    LENGTH() -- 문자열의 문자열수를 반환해주는 함수

-- 사원이름, 직급, 급여를 조회하세요.
-- 단, 이름길이가 짧은 사람이 먼저 출력되게 하고, 같은 길이면 오름차순 정렬하세요
SELECT
    ename 이름, job 직급, sal 급여
FROM
    emp
ORDER BY
    LENGTH(ename) ASC, ename
;

SELECT LENGTH('윤아') 문자수, LENGTHB('윤아') 바이트수 FROM dual;

--------------------------------------------------------------------------------
    집합연산자
    ==> 두 개 이상의 SELECT 질의명령을 이용해서
        그 결과의 집합을 얻어내는 방법
        
        형식 ]
            SELECT ...
            집합연산자
            SELECT ...;
            
        종류 ]
            UNION
            ==> 합집합의 개념
                두가지 질의명령의 결과를 하나로 합쳐서 조회한다.
                            
            UNION ALL
            ==> 합집합의 개념 
                단, UNION과 다른 점은 
                UNION의 경우는 중복 데이터를 한번만 출력해주는데
                UNION ALL의 경우는 중복데이터를 모두 출력해준다.
                
            INTERSECT
            ==> 교집합의 개념
                조회 질의명령의 결과중
                양쪽 모두 존재하는 결과만 출력하는 것
                
            MINUS
            ==> 차집합의 개념
                앞의 질의명령의 결과에서
                뒤의 질의명령의 결과에 포함된 데이터를 뺀 결과를 출력해준다.
                
        참고 ]
            공통적인 특징
                1. 두 질의명령에서 나온 결과는 같은 필드의 개수를 가져야 한다.
                
                2. 두 질의명령의 결과는 같은 형태의 필드이면 된다.(타입만 같으면 된다.)
SELECT 
    ename 사원이름, sal 급여
FROM
    emp
UNION
SELECT
    ename 사원이름, deptno 부서번호
FROM
    emp
;
--------------------------------------------------------------------------------
    단일행 함수
        
        ***
        숫자 <---------> 문자 <---------> 날짜
    
        1. 숫자함수
            ==> 데이터가 숫자인 경우에만 사용할 수 있는 함수
            
                1) ABS()    : 절대값을 구해주는 함수
                    형식 ]
                        ABS(데이터 또는 필드 또는 연산식)
                        
SELECT ABS(-3.14 * 2) pi FROM dual;      


                        
                2) ROUND()  : 반올림해주는 함수
                    ==> 지정한 자리수에서 반올림
                    
                        형식 ]
                            ROUND(데이터[, 자릿수])
                            
                3) FLOOR()  : 버림함수, 소수점 이하를 무조건 버린다.
                    형식 ]
                        FLOOR(데이터 또는 필드 또는 연산식)
                        
                4) TRUNC()  : 자릿수 이하 버림 함수, 자릿수를 지정해서 버릴 수 있다.
                    형식 ]
                        TRUNC(데이터[, 자릿수])
                        
                        참고 ]
                            자릿수는 소수이하 지릿수를 의미하고
                            만약 음수형태로 입력하면
                            소수이상 자릿수를 의미한다.
 
SELECT 
    ename 사원이름, sal 원급여, sal * 1.15 계산값, round(sal  * 1.15, -2) 인상급여, FLOOR(sal * 1.15) 버림함수, TRUNC(sal * 1.15, -2) 자릿수버림
FROM
    emp
;                            
                            
                            
                5) MOD()    : 나머지 구하는 함수
                    형식 ]
                        MOD(데이터, 나누는수)

-- 급여가 짝수인 사원만 출력하세요
SELECT
    ename 이름, job 직급, sal 급여
FROM
    emp
WHERE
    mod(sal, 2) = 0

--------------------------------------------------------------------------------
    
        1. LOWER() : 소문자로 변환
        
        2. UPPER() : 대문자로 변환      
        
        3. INITCAP() : 단어의 첫 문자만 대문자로 나머지는 소문자로 변환해주는 함수
        
SELECT
    LOWER(ename) 소문자이름, UPPER(LOWER(ename)) 대문자이름, INITCAP(ename) "첫글자만 대문자"
FROM
    emp
;          

SELECT INITCAP('hello jennie') FROM dual; -- ==> Hello Jennie

--------------------------------------------------------------------------------        
        4. LENGTH() / LENGTHB()
            형식 ]
                LENGTH(문자열데이터)
                
            의미 ]
                LNEGTH()    : 문자열의 문자수를 반환
                LENGTHB()   : 문자열의 바이트수를 반환
                
SELECT
    empno, ename, length(ename), job, sal
FROM
	emp
WHERE
    length(ename) <= 5
;

--------------------------------------------------------------------------------                
        5. CONCAT()
            ==> || (결합 연산자)와 같은 기능
                형식 ]
                    CONCAT(데이터1, 데이터2)
                    
SELECT
    CONCAT('Mr.', ename) 사원이름, CONCAT(job, ' 직급') 직급, CONCAT(sal, ' 달러') 급여
FROM
    emp
;

--------------------------------------------------------------------------------                    
        6. SUBSTR() / SUBSTRB()
            ==> 문자열 중에서 특정 위치의 문자열만 따로 추출해서 반환해주는 함수
                형식 ]
                    SUBSTR(데이터, 시작위치, 꺼낼개수)
                    
                        주의 ]
                            위치값은 데이터베이스에서는 1부터 시작한다.
                            
                        참고 ]
                            개수는 생략할 수 있다.
                            이때 꺼내오는 문자열은 문자열의 끝부분까지 꺼내온게 된다.
                            
                        참고 ]
                            시작위치를 음수로 기입하는 경우는
                            문자열의 뒤에서부터의 자릿수를 의미한다.
                            
SELECT SUBSTR('Hello World!', 1, 5) 문자열추출 FROM dual;

SELECT SUBSTR('Hello World!', -6, 6) 문자열추출 FROM dual;

--------------------------------------------------------------------------------                            
        7. INSTR() / INSTRB()
            ==> 문자열 중에서 원하는 문자열이 몇번째 글자에 있는지를 알아내주는 함수
            
                형식 ]
                    INSTR(데이터1, 데이터2[, 시작위치[, 출현 횟수]])
                    
SELECT INSTR('hello honggildong! hi', 'h', 2, 2) FROM dual;
--------------------------------------------------------------------------------
                    
        8. LPAD() / RPAD()
            ==> 문자열의 길이를 지정한 후
                문자열을 만드는데
                남는 공간은 지정한 문자로 문자열을 만들어주는 함수
                차이점은 남는 공간을 채우는데
                    왼쪽에 채울건지    LPAD()
                    오른쪽에 채울건지   RPAD()
                    
                형식 ]
                    LPAD(데이터, 만들길이, 채울문자)

-- 사원이름을 조회하는데 이름을 10글자로 만들어서 표현하세요. * 로 남는 공간은 채우세요.
SELECT
    LPAD(ename, 10, '*') 오른쪽정렬, RPAD(ename, 10, '*') 왼쪽정렬
FROM
    emp
;

--------------------------------------------------------------------------------

    9. REPLACE()
        ==> 문자열의 특정부분을 다른 문자열로 대체해서 반환해주는 함수
        
        형식 ]
            REPLACE(데이터, 찾을문자, 대치문자)
            
SELECT
    REPLACE('hong gil dong', 'n', 'nn') 홍길동
FROM
    dual
;

SELECT
    REPLACE('      hong gil dong        ', ' ', '') 홍길동
FROM
    dual
;
--------------------------------------------------------------------------------            
    10. TRIM
        ==> 문자열 중에서 앞 또는 뒤에 있는 지정한 문자를 삭제해서 반환해주는 함수
        
        참고 ]
            중간에 있는 문자는 삭제하지 못한다.
            
        형식 ] 
            TRIM(삭제할 문자, FROM 데이터)
            
        참고 ]
            같은 문자가 앞, 뒤에 연속되어 있으면모두 지운다.
        
        참고 ]
            가끔 데이터 앞 또는 뒤에 공백문자가 들어간 경우가 있다.
            이런 경우를 대비해서 앞 뒤에 들어간 공백 문자를 제거할 목적으로 많이 사용한다.
            
SELECT
    TRIM('      hong gil dong        ') 홍길동
FROM
    dual
;

SELECT
    TRIM('h'   FROM 'hong gil dong        ') 홍길동
FROM
    dual
;
--------------------------------------------------------------------------------            
    10 - 1.
        LTRIM
        RTRIM
        
        형식 ]
            LTRIM(데이터, 삭제문자)
            
SELECT
    RTRIM(
    LTRIM('oooooooooooooooooooooooooracleooooooooooooooooooooooooo', 'o'), 'o'),
    TRIM('o' FROM 'oooooooooooooooooooooooooracleooooooooooooooooooooooooo')
FROM
    dual
;     
--------------------------------------------------------------------------------
  
    11. CHR()
        ==> ASCII 코드를 알려주면 그 코드에 해당하는 문자를 알려주는 함수
        
        형식 ]
            CHR(숫자)
        
    12. ASCII()
        ==> 문자열에 해당하는 ASCII 코드를 알려주는 함수
        
        형식 ]
            ASCII(데이터)
            
        참고 ]
            두글자 이상으로 된 문자열의 경우는
            첫 문자의 코드값을 반환해준다.
            
SELECT
    ASCII('HONG'),
    CHR( ASCII('HONG')) 알파벳
FROM
    dual
; 
 
--------------------------------------------------------------------------------            
    13. TRANSLATE()
        ==> REPLACE와 마찬가지로 문자열 중 지정한 부분을
            다른 문자열로 바꿔서 반환해주는 함수
            
            차이점 ]
                REPLACE 함수는 바꿀 문자열 전체를 바꾸는데
                이 함수는 문자단위로 처리한다.
        형식 ]
            TRANSLATE(데이터, 바꿀문자열, 바뀐문자열)

SELECT
    TRANSLATE('ADBC', 'ABCD', '1234')
    /*
        A--> 1
        B--> 2
        C--> 3
        D--> 4
        로 변환한다.
    */
FROM
    dual
;

--------------------------------------------------------------------------------
    날짜 처리 함수
    
        **
        참고 ]
            SYSDATE
            ==> 예약어
                현재 시스템의 날짜와 시간을 알려주는 예약어
                (의사 컬럼으로 보면 된다.)
SELECT
    ename 사원이름,
    FLOOR(sysdate - hiredate) || '일' 근무일수
FROM
    emp
;

SELECT
    SYSDATE + 10 "10일후"
FROM
    dual
;
--------------------------------------------------------------------------------
 날짜데이터 처리 함수
    
        1. ADD_MONTHS()
            ==> 날짜에 지정한 달수를 더하거나 뺀 날짜를 알려준다.
            
            형식 ]
                ADD_MONTHS(날짜, 더할개월수)
                
            참고 ]
                더할개월수에 음수를 입력하면
                해당 개월수를 뺸 날짜를 알려준다.
                
SELECT
    ADD_MONTHS(SYSDATE, 4) "4개월 후",
   ADD_MONTHS(SYSDATE, -3) "3개월 전"
FROM
    dual
;                
--------------------------------------------------------------------------------                
        2. MONTHS_BETWEEN
            ==> 두 날짜 데이터의 개월수를 알려주는 함수
            
                형식 ]
                    MONTHS_BETWEEN(날짜, 날짜)
-- 사원들의 근무개월수를 조회하세요.                    
SELECT
    ename 사원이름, hiredate 입사일,
    TRUNC(MONTHS_BETWEEN(SYSDATE, hiredate)) "근무개월수"
FROM
    emp
;                    
--------------------------------------------------------------------------------        
        3. LAST_DAY
            ==> 지정한 날짜가 포함된 월의 마지막 날짜를 알려주는 함수
            
            형식 ]
                LAST_DAY(날짜)
                
-- 이번달 마지막 날짜를 조회하세요
SELECT
    LAST_DAY(sysdate)
FROM
    dual
;       

-- 사원들의 첫번째 월급을 조회하세요. 급여지급은 매월 말일로 한다.
SELECT
    ename 사원이름, sal 급여, hiredate 입사일, LAST_DAY(hiredate) 첫급여일
FROM
    emp
;

-- 사원들의 첫번째 월급을 조회하세요. 급여지급은 매월 1일로 한다.
SELECT
    ename 사원이름, sal 급여, hiredate 입사일, LAST_DAY(hiredate) + 1 첫급여일
FROM
    emp
;
--------------------------------------------------------------------------------
        4. NEXT_DAY
            ==> 지정한 날짜 이후에 가장 처음 오는 지정한 요일에 해당하는 날짜를 알려주는 함수
            
            형식 ]
                NEXT_DAY(날짜, 요일)
                
                참고 ]
                    요일 정하는 방법
                    
                        1. 우리는 한글 세팅이 된 오라클이므로
                            '월', '화', '수', ...
                            '월요일', '화요일', ....
                        2. 영문권에서는
                            'SUN', 'MON', ...
                            'SUNDAY', 'MONDAY', ...
                            
 -- 이번주 일요일이 며칠인지 조회하세요
SELECT
    NEXT_DAY(sysdate, '일')
FROM
    dual
;

-- 올 성탄절 이후 첫 토요일
SELECT
    NEXT_DAY(TO_DATE('2022/12/25', 'YYYY/MM/DD'), '토') AS "첫 토요일"
    -- 이 경우는 날짜데이터를 입력해야 하지만
    -- 문자로 입력해도 실행되는 이유는 문자데이터를 날짜 데이터로 변환해주는
    -- 함수가 자동호출되서 날짜데이터로 변환해주기 때문에 그렇다.
FROM
    dual
;                           
--------------------------------------------------------------------------------                            
        5. ROUND()
            ==> 날짜를 지정한 부분에서 반올림하는 함수
                이때 지정부분은 년, 월, 일 ..
                
                형식 ]
                    ROUND(날짜, 기준단위)
                    
                    참고 ]
                        기준단위
                            CC, SCC : 4자리 연도의 끝 두글자를 기준으로 반올림
                            
                            SYYY, YYYY, YEAR, SYEAR, YYY, YY, Y : 년(7월 1일부터 반올림)
                            
                            DDD, D, J   : 일을 기준으로 반올림
                            
                            HH, HH12, HH24 : 시를 기준으로 반올림
                            
                            Q : 한 분기의 두번째 달의 16일을 기준으로 반올림
                            
                            MONTH, MON, MM, RM : 월(16일을 기준으로 반올림)
                            
                            DAY, DY : 한주가 시작되는 날짜를 기준으로 반올림
                            
                            MI : 분을 기준으로 반올림

SELECT
    TO_CHAR(ROUND(sysdate, 'YEAR'), 'YYYY/MM/DD HH24:mi:ss') 반올림
FROM
    dual
;

-- 현재시간을 월을 기준으로 반올림하세요
SELECT
    ROUND(sysdate, 'month') 월반올림
FROM
    dual
;

SELECT
    ROUND(sysdate, 'dd') 일반올림
FROM
    dual
;
 
SELECT
    ROUND(sysdate, 'day') 일반올림 -- day를 쓸 경우 주단위 반올림이 된다.
FROM
    dual
;

--------------------------------------------------------------------------------
변환함수
    ==> 함수는 데이터 형태에 따라서 사용하는 함수가 달라진다.
        그런데 만약 사용하려는 데이터가 함수에 필요한 데이터가 아닌경우에는
        데이터의 형태를 변환해서 사용해야 한다.
        ==> 데이터의 형태를 바꾸어서 특정 함수에 사용 가능하도록 만들어 주는 함수
    
                      TO_CHAR()                TO_CHAR()
                      --------->              <---------
        NUMBER      <----------->    CHAR    <----------->     DATE
                      <---------               --------->
                      TO_NUMBER()               TO_DATE()
    1. TO_CHAR()
        ==> 날짜나 숫자를 문자데이터로 변환시켜주는 함수
        
        형식 1 ]
            TO_CHAR(날짜 또는 숫자)
        
        형식 2 ]
            TO_CHAR(날짜 또는 숫자, 형식)
            ==> 바꿀때 원하는 형태를 지정해서 문자열로 변환시키는 방법
            
            주의사항 ]
                숫자를 문자로 변환할때 형식으로 사용하는 문자는
                    9   - 무효숫자는 표현안한다.
                    0   - 무효숫자도 표현한다.
                    
            참고 ]
                날짜 출력 형식
                    YYYY, YY    : 년도
                    MM          : 월
                    MON         : 월을 알파벳으로 표현
                    DAY         : 요일
                    DY          : 요일을 약자로 표현
                    HH          : 시간을 12진법으로
                    HH24        : 시간을 24진법으로
                    MI          : 분
                    SS          : 초
SELECT
    ename 사원이름, TO_CHAR(hiredate, 'YYYY') || '년 ' || TO_CHAR(hiredate, 'MM') || '월 ' || TO_CHAR(hiredate, 'DD') || '일 ' 입사일, deptno 부서번호,
    TO_CHAR(hiredate, 'YYYY"년" MM"월" DD"일"') 한글입사일
FROM
    emp
;
                    
--------------------------------------------------------------------------------                    
    2. TO_DATE()
        ==> 문자로 된 내용을 날짜데이터로 변환시켜주는 함수
        
        형식 1 ]
            TO_DATE(날짜 형식 문자열)
            
        형식 2 ]
            TO_DATE(날짜형식의 문자데이터, '변환형식')
            ==> 문자열이 오라클이 지정하는 형식의 날짜처럼 
                만들지 못한 경우 사용하는 방법
                
                '12/09/91' 처럼 월, 일, 년의 순서로 문자가 만들어졌다.
                
                참고 ]
                    여기에서의 변환형식이란
                    입력한 문자데이터가 어떤 의미를 가지고 만들었는지를
                    알려주는 기능을 한다.

-- 자신이 지금까지 며칠동안 살고 있는지를 알아보자
SELECT
    FLOOR(SYSDATE - TO_DATE('93/01/04')) "살아온 날수", -- * 3 as "밥그릇 수"
    FLOOR(SYSDATE - TO_DATE('93_1 4')) 날수
FROM
    dual
;
--------------------------------------------------------------------------------                    
    3. TO_NUMBER()
        ==> 숫자형식의 문자데이터를 숫자로 변환시켜주는 함수
            문자데이터는 +, - 연산이 안된다.
            
            형식 1 ]
                TO_NUMBER(문자데이터)
            
            형식 2 ]
                TO_NUMBER(데이터, 변환형식)
                
                변환형식
                    현재 문자열이 어떤 의미로 만들어 졌는지를 알려주는 기능
                    
                '1,234' + '5,678'

SELECT
    TO_NUMBER('1,234', '9,999') + TO_NUMBER('5,678', '9,999')
FROM
    dual
;
--------------------------------------------------------------------------------
    기타 함수
    
    1. NVL()
        ==> NULL 데이터는 모든 연산(함수)에 적용되지 못한다.
            이 문제를 해결하기 위해서 제시된 함수
            
            의미 ]
                NULL 데이터이면 강제로 지정한 데이터로 바꾸어서
                연산, 함수에 적용하도록 하는 함수
                
            형식 ]
                NVL(데이터, 바뀔내용)
                
            ***
            주의 ]
                지정한 데이터와 바뀔 내용은 반드시 형태가 일치해야 한다.

SELECT
    ename 사원이름,
    NVL(TO_CHAR(comm), 'NONE') 커미션
FROM
    emp
;                
--------------------------------------------------------------------------------                
    2. NVL2()
        형식 ]
            NVL2(필드이름, 처리내용1, 처리내용2)
            
        의미 ]
            필드의 내용이 NULL이면 처리내용2를
            NULL이 아니면 처리내용1으로 처리하세요
SELECT
    ename 사원이름, NVL2(comm, sal + comm, sal)
FROM
    emp
;            
--------------------------------------------------------------------------------            
    3. NULLIF
        형식 ]
            NULLIF(데이터1, 데이터2)
            
        의미 ]
            두 데이터가 같으면 NULL로 처리하고
            두 데이터가 다르면 데이터1으로 처리하세요
--------------------------------------------------------------------------------            
    4. COALESCE()
        형식 ]
            COALESCE(데이터1, 데이터2, ...)
        
        의미 ]
            여러개의 데이터중 가장 첫번째 나오는 NULL이 아닌 데이터를 출력하세요
SELECT
    ename, sal, comm, COALESCE(comm, sal, -1000)
FROM
    emp
;
--------------------------------------------------------------------------------
    조건처리 함수
    ==> 함수라기 보다는 명령에 가깝다.
        자바의 switch ~ case, if를 대신하기 위해서 만들어 놓은 것.
        
    1. DECODE : switch ~ case 명령에 해당하는 함수
    
        형식 ]
            DECODE(필드이름, 값1, 처리내용1,
                            값2, 처리내용2,
                            ...
                            처리내용n)
        의미 ]
            필드의 내용이
                값1과 같으면 처리내용1을
                값2와 같은면 처리내용2를
                ...
                그 외의 값은 처리내용n
                으로 처리하세요
                
        주의 ]
            DECODE 함수내에서는 조건식을 사용할 수 없다.
SELECT
    ename 사원이름, job 사원직급, deptno 부서번호, DECODE(deptno, 10, '회계부', 
                                                                  20, '연구부',
                                                                  30, '영업부',
                                                                      '관리부' ) 부서이름
FROM
    emp
;
--------------------------------------------------------------------------------
    2. CASE : IF 명령에 해당하는 명령
        
        형식 1 ]
            CASE    WHEN        조건식1    THEN    내용1
                    WHEN        조건식2    THEN    내용2
                    ....
                    ELSE 내용n
            END
            
            의미 ]
                조건식 1이 참이면 내용1을
                조건식 2가 참이면 내용2를
                ...
                그외에는 내용n을 실행하세요
                    
        형식 2 ]
            CASE    필드이름    WHEN    값1  THEN    실행내용1
                                WHEN    값2  THEN    실행내용2
                                ELSE    실행내용n
            END
            
            의미 ]
                DECODE 함수와 동일한 의미
                즉, 묵시적으로 동등비교만 사용하는 명령

SELECT
    ename 사원이름, job 직급, sal 급여, 
    FLOOR(
    CASE    WHEN sal < 1000 THEN sal * 1.2
            WHEN sal < 3000 THEN sal * 1.15
            ELSE sal * 1.1
    
    END) "인상급여"
FROM
    emp
;

--------------------------------------------------------------------------------
    그룹함수
    ==> 여러행의 데이터를 하나로 만들어서 뭔가를 계산하는 함수
    
        ***
        참고 ]
            그룹함수는 결과가 오직 한개만 나오게 된다.
            따라서 그룹 함수는
            결과가 여러개 나오는 경우(단일행함수, 각필드)와 혼용해서 사용할 수 없다.
            오직 결과가 한줄로만 나오는 것과만 혼용할 수 있다.
            
        1. SUM
        ==> 데이터의 합계를 구하는 함수
            형식 ]
                SUM(필드이름)
                
        2. AVG
        ==> 데이터의 평균을 구하는 함수
            형식 ]
                AVG(필드이름)
                
            참고 ]
                NULL 데이터는 모든 연산에서 제외가 되기 때문에
                평균을 구하는 연산에서도 완전히 제외된다.
                
        3. COUNT
        ==> 데이터들의 개수를 구해주는 함수
            지정한 필드 중에서 데이터가 존재하는 필드의 개수를 알려주는 함수
            형식 ]
                COUNT(필드이름)
            
            참고 ]
                필드이름 대신에 *를 사용하면
                각각의 필드의 카운터를 따로 구한 후
                그 결과중에서 가장 큰 값을 알려주게 된다.
                
        4. MAX / MIN
       ==> 지정한 필드의 데이터 중에서 가장 큰값(또는 작은값)을 알려주는 함수
       
SELECT
    SUM(sal) 총급여합, MAX(sal) 최대급여, MIN(sal) 최소급여, COUNT(*) 사원수, FLOOR(AVG(sal))
    
FROM
    emp
;       
--------------------------------------------------------------------------------       
   오라클에서 사용할 수 있는 데이터 형태
    
        1. 문자형
            CHAR
                ==> 고정길이형 문자형
                
                형식 ]
                    CHAR(최대길이)
                    ==> 이때 사용 가능한 최대 길이는 2000 바이트 까지만 사용할 수 있다.
                    
            VARCHAR2
                ==> 가변길이형 문자형
                
                형식 ]
                    VARCHAR2(최대길이)
                    ==> 최대길이는 4000 바이트까지 사용할 수 있다.
                    
            LONG
                ==> 가변길이형 문자형
                
                형식 ]
                    LONG
                    ==> 최대길이 2Gb까지 사용할 수 있다.
                    
            CLOB
                ==> 가변길이형 문자형
                
                    형식 ]
                        CLOB
                        ==> 최대길이는 4Gb까지 사용할 수 있다.
                    
                    ==> 이 타입은 VARCHAR2가 4Kb까지만 허락하기 때문에
                        그 이상의 글자수를 가진 데이터는 입력받지 못한다.
                        이 문제를 해결하기 위한 방식으로 만들어 놓은 타입
        참고 ]
            고정길이 문자형( 처리속도가 빠르다)
                ==> 문자의 길이를 미리 지정한 후
                    입력한 문자가 길이보다 부족하면 공백을 이용해서
                    반드시 같은 길이의 문자를 만들어서 입력하는 방식
                    ==> 우편번호와 같이 길이가 완전히 고정된 데이터에 한해서
                        주로 사용되는 타입
                        
            가변길이 문자형
                ==> 입력한 문자의 길이에 따라서 스스로 사용하는 공간을 변경해서
                    문자열의 길이를 입력한 문자의 길이에 맞추는 형태
                    ==> 데이터의 길이를 알 수 없는 경우에 주로 많이 사용한다.
            
        2. 숫자형
            NUMBER
                
                형식 ]
                    NUMBER(숫자1[, 숫자2])
                    
                    숫자1 : 전체 자릿수를 의미(유효 자릿수)
                    숫자2 : 소수이하 자릿수를 의미
                    
                참고 ]
                  숫자1보다 큰수는 입력받지 못한다.
                  숫자2보다 소수이하가 많으면 자동으로 반올림해서 입력한다.

        3. 날짜형
            DATE
            
                형식 ]
                    DATE

*/